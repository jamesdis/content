import os
import sys
import glob
import uuid
import ffmpeg
import shutil
import subprocess
from pathlib import Path

# =========================
# C·∫§U H√åNH M·∫∂C ƒê·ªäNH
# =========================
BASE_PATH = r"D:/Second-Jobs/tho_video"
SOURCE_FOLDER = os.path.join(BASE_PATH, "1_SOURCE")
base_out = r"D:/3M-system/Content-System"

MIN_DURATION_CLIP = 3
MAX_DURATION_CLIP = 20

MAX_DURATION_FINAL_VIDEO = 500
TARGET_FPS = 30                # Chu·∫©n ho√° CFR
AUDIO_RATE = 48000             # 48kHz
AUDIO_CH = 2                   # Stereo
QP_VALUE = "18"                # NVENC constqp (16 = n√©t h∆°n, file to h∆°n)

# =========================
# TI·ªÜN √çCH CHUNG
# =========================
def fix_encoding():
    if sys.stdout.encoding != "utf-8":
        try:
            sys.stdout.reconfigure(encoding="utf-8")
        except Exception:
            pass

def run_quiet(cmd, check=True):
    return subprocess.run(cmd, check=check, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def gpu_available():
    try:
        encoders = subprocess.check_output(
            ["ffmpeg", "-hide_banner", "-encoders"], stderr=subprocess.STDOUT
        ).decode("utf-8", errors="ignore").lower()
        return "h264_nvenc" in encoders
    except Exception:
        return False

def encode_params_high_quality(use_gpu: bool):
    """
    T·ªëi ∆∞u timestamp & ch·∫•t l∆∞·ª£ng ƒë·ªÉ concat ·ªïn ƒë·ªãnh:
      - Video: CFR 30fps, GOP ·ªïn ƒë·ªãnh, PTS s·∫°ch
      - Audio: 48kHz stereo + aresample async ch·ªëng drift
    """
    common = [
        "-r", str(TARGET_FPS),             # √©p CFR
        "-vsync", "cfr",
        "-g", str(TARGET_FPS * 2),         # GOP ~2s
        "-bf", "3",
        "-pix_fmt", "yuv420p",
        "-profile:v", "high",
        "-c:a", "aac", "-b:a", "192k",
        "-ar", str(AUDIO_RATE), "-ac", str(AUDIO_CH),
        "-af", "aresample=async=1:first_pts=0",  # ch·ªëng l·ªách audio
        "-fflags", "+genpts",
        "-avoid_negative_ts", "make_zero",
        "-movflags", "+faststart",
        "-reset_timestamps", "1",
    ]
    if use_gpu:
        return [
            "-c:v", "h264_nvenc",
            "-preset", "p7",           # n·∫øu l·ªói driver -> ƒë·ªïi "p6"/"slow"
            "-rc", "constqp", "-qp", QP_VALUE,
        ] + common
    else:
        return [
            "-c:v", "libx264",
            "-preset", "slow",
            "-crf", "18",
        ] + common

def check_input_videos(input_folder: str):
    vids = []
    for ext in (".mp4", ".mov", ".mkv", ".avi", ".flv"):
        vids.extend(glob.glob(os.path.join(input_folder, f"*{ext}")))
    return sorted(vids)

def get_duration(path: str) -> float:
    try:
        return float(ffmpeg.probe(path)["format"]["duration"])
    except Exception:
        return 0.0

# =========================
# X·ª¨ L√ù CH√çNH
# =========================
def transcode_to_fixed(inputs, temp_dir: Path, use_gpu: bool):
    """
    Chu·∫©n ho√° clip ‚Üí c√πng codec/tham s·ªë/PTS/CFR ƒë·ªÉ concat copy kh√¥ng l·ªói.
    Tr·∫£ v·ªÅ: [(fixed_path, duration)]
    """
    temp_dir.mkdir(parents=True, exist_ok=True)
    enc = encode_params_high_quality(use_gpu)
    fixed = []

    for i, src in enumerate(inputs):
        fixed_path = temp_dir / f"fixed_{i:04d}.mp4"
        if use_gpu:
            cmd = ["ffmpeg", "-y", "-hwaccel", "cuda", "-i", src] + enc + [str(fixed_path)]
        else:
            cmd = ["ffmpeg", "-y", "-i", src] + enc + [str(fixed_path)]

        try:
            run_quiet(cmd, check=True)
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è FFmpeg l·ªói khi chu·∫©n ho√° clip, ch·∫°y l·∫°i ƒë·ªÉ xem log‚Ä¶")
            print("CMD:", " ".join(cmd))
            subprocess.run(cmd, check=True)  # in log

        dur = get_duration(str(fixed_path))
        # Gi·ªØ clip 1‚Äì60s (tu·ª≥ b·∫°n s·ª≠a n·∫øu c·∫ßn)
        if dur <= MIN_DURATION_CLIP or dur > MAX_DURATION_CLIP:
            print(f"‚è© B·ªè clip (duration {dur:.2f}s): {src}")
            try:
                fixed_path.unlink(missing_ok=True)
            except Exception:
                pass
            continue

        fixed.append((str(fixed_path), dur))
        print(f"‚úÖ Fixed: {Path(src).name} ({dur:.2f}s)")
    return fixed

def concat_batch(batch_files, out_path: Path):
    """
    Concat demuxer + -c copy (nhanh/·ªïn ƒë·ªãnh v√¨ fixed_* ƒë√£ ƒë·ªìng b·ªô).
    """
    out_path.parent.mkdir(parents=True, exist_ok=True)
    list_file = out_path.parent / f"__list_{uuid.uuid4().hex}.txt"
    with open(list_file, "w", encoding="utf-8") as f:
        for p in batch_files:
            # FFmpeg concat demuxer y√™u c·∫ßu ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi, c√≥ quote
            f.write(f"file '{os.path.abspath(p)}'\n")

    try:
        run_quiet([
            "ffmpeg", "-y",
            "-f", "concat", "-safe", "0",
            "-i", str(list_file),
            "-c", "copy",
            "-fflags", "+genpts",
            "-avoid_negative_ts", "make_zero",
            "-movflags", "+faststart",
            str(out_path)
        ], check=True)
    finally:
        try:
            list_file.unlink(missing_ok=True)
        except Exception:
            pass

def merge_many_videos_by_duration(input_files, out_root: Path, target_duration: float):
    """
    Gh√©p nhi·ªÅu video li√™n ti·∫øp cho ƒë·∫øn khi h·∫øt clip.
    M·ªói video: >= target_duration v√† < MAX_DURATION_FINAL_VIDEO
    """
    out_root.mkdir(parents=True, exist_ok=True)
    temp_dir = out_root / "__temp_merge"
    used_gpu = gpu_available()
    print(f"üñ•Ô∏è GPU NVENC: {'ON' if used_gpu else 'OFF (fallback CPU)'}")

    fixed = transcode_to_fixed(input_files, temp_dir, used_gpu)
    if not fixed:
        print("‚ùå Kh√¥ng c√≥ clip h·ª£p l·ªá sau khi chu·∫©n ho√°.")
        return 0

    outputs, idx, total_clips = 0, 0, len(fixed)

    while idx < total_clips:
        batch, total = [], 0.0
        while idx < total_clips and total < target_duration:
            path_i, dur_i = fixed[idx]
            # Kh√¥ng v∆∞·ª£t 60s cho video final
            if total + dur_i >= MAX_DURATION_FINAL_VIDEO:
                print(f"‚è© B·ªè clip {Path(path_i).name} v√¨ th√™m v√†o s·∫Ω {MAX_DURATION_FINAL_VIDEO:.1f} (t·ªïng hi·ªán t·∫°i {total:.2f}s).")
                break
            batch.append(path_i)
            total += dur_i
            idx += 1

        if not batch:
            break

        outputs += 1
        out_path = out_root / f"final_{outputs:03d}.mp4"
        print(f"üé¨ Render #{outputs}: {len(batch)} clips ~ {total:.2f}s ‚Üí {out_path.name}")
        concat_batch(batch, out_path)

    # d·ªçn r√°c
    try:
        shutil.rmtree(temp_dir, ignore_errors=True)
    except Exception:
        pass

    return outputs

# =========================
# LU·ªíNG T∆Ø∆†NG T√ÅC
# =========================
def process_videos():
    fix_encoding()

    topic = input("üìÅ Nh·∫≠p topic ngu·ªìn (vd: lookalikecam-0): ").strip()

    print(
        "üìÇ Ch·ªçn th∆∞ m·ª•c ngu·ªìn c·∫ßn x·ª≠ l√Ω:\n"
        "1) LONGS\n"
        "2) SHORTS\n"
        "3) KH√ÅC (t·ª± nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß)"
    )
    choice = input("üëâ Nh·∫≠p (1/2/3): ").strip()

    if choice == "1":
        source_folder = Path(SOURCE_FOLDER) / topic / "LONGS"
    elif choice == "2":
        source_folder = Path(SOURCE_FOLDER) / topic / "SHORTS"
    elif choice == "3":
        custom_path = input("üîé D√°n ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c ngu·ªìn: ").strip().strip('"').strip("'")
        source_folder = Path(custom_path)
        if not source_folder.is_dir():
            print(f"‚ùå ƒê∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ph·∫£i th∆∞ m·ª•c: {custom_path}")
            return
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 1/2/3.")
        return

    # Nh·∫≠p duration an to√†n (m·∫∑c ƒë·ªãnh 40s n·∫øu b·ªè tr·ªëng)
    s = input("‚è±Ô∏è Nh·∫≠p duration m·ªói video (s) [m·∫∑c ƒë·ªãnh 40]: ").strip()
    if s == "":
        target_duration = 40.0
        print("‚ÑπÔ∏è D√πng m·∫∑c ƒë·ªãnh 40s.")
    else:
        try:
            target_duration = float(s)
            if target_duration <= 0:
                print("‚ùå Duration ph·∫£i > 0.")
                return
        except ValueError:
            print("‚ùå Kh√¥ng ph·∫£i s·ªë h·ª£p l·ªá.")
            return

    print("\nüì¶Ch·ªçn th∆∞ m·ª•c output:")
    sub_out = input("üîπ Nh·∫≠p topic output (vd: Lookalikecam): ").strip() or "Output"
    output_root = Path(base_out) / sub_out
    output_root.mkdir(parents=True, exist_ok=True)
    print(f"üìÅ Th∆∞ m·ª•c xu·∫•t: {output_root}")

    print(f"üìÅ Th∆∞ m·ª•c ngu·ªìn: {source_folder}")
    if not source_folder.is_dir():
        print("‚ùå Th∆∞ m·ª•c ngu·ªìn kh√¥ng t·ªìn t·∫°i.")
        return

    videos = check_input_videos(str(source_folder))
    if not videos:
        print("‚ùå Kh√¥ng t√¨m th·∫•y video h·ª£p l·ªá trong ngu·ªìn.")
        return

    count = merge_many_videos_by_duration(videos, output_root, target_duration)

    if count > 0:
        print(f"‚úÖ Ho√†n t·∫•t. ƒê√£ xu·∫•t {count} video t·∫°i: {output_root}")
    else:
        print("‚ùå Kh√¥ng xu·∫•t ƒë∆∞·ª£c video n√†o.")

if __name__ == "__main__":
    process_videos()
