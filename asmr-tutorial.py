import os
import subprocess
import tkinter as tk
from tkinter import filedialog, simpledialog
from pathlib import Path
import ffmpeg
import whisper  # üß† d√πng ƒë·ªÉ t·∫°o caption t·ª± ƒë·ªông b·∫±ng AI

# =========================
# ‚öôÔ∏è TI·ªÜN √çCH C∆† B·∫¢N
# =========================
def get_duration(path):
    try:
        return float(ffmpeg.probe(path)["format"]["duration"])
    except Exception:
        return 0.0

def run_cmd(cmd):
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói: {e}")

def nvidia_gpu_available():
    try:
        enc = subprocess.check_output(["ffmpeg", "-hide_banner", "-encoders"],
                                      stderr=subprocess.STDOUT).decode("utf-8")
        return "h264_nvenc" in enc
    except Exception:
        return False

# =========================
# üéß X·ª¨ L√ù AUDIO / VIDEO
# =========================
def change_audio_speed(input_audio, output_audio, speed):
    atempo_chain = []
    while speed > 2.0:
        atempo_chain.append("atempo=2.0")
        speed /= 2
    while speed < 0.5:
        atempo_chain.append("atempo=0.5")
        speed *= 2
    atempo_chain.append(f"atempo={speed:.3f}")
    filter_str = ",".join(atempo_chain)

    cmd = [
        "ffmpeg", "-y", "-i", input_audio,
        "-filter:a", filter_str,
        "-vn", "-c:a", "aac", "-b:a", "192k",
        output_audio
    ]
    run_cmd(cmd)

def merge_audio_video_keep_quality(video_path, audio_path, output_path):
    cmd = [
        "ffmpeg", "-y",
        "-hwaccel", "cuda",  # ∆∞u ti√™n GPU NVIDIA
        "-i", video_path,
        "-i", audio_path,
        "-c:v", "copy",  # gi·ªØ nguy√™n codec g·ªëc
        "-c:a", "aac", "-b:a", "192k",
        "-shortest",
        output_path
    ]
    run_cmd(cmd)

def merge_videos_concat_nvidia(videos, output_path):
    list_file = "__list_nvenc.txt"
    with open(list_file, "w", encoding="utf-8") as f:
        for v in videos:
            f.write(f"file '{os.path.abspath(v)}'\n")

    cmd = [
        "ffmpeg", "-y",
        "-hwaccel", "cuda",
        "-f", "concat", "-safe", "0",
        "-i", list_file,
        "-c", "copy",
        output_path
    ]
    run_cmd(cmd)
    os.remove(list_file)

def add_text_to_video(input_path, output_path, text, position="bottom"):
    pos_map = {
        "top": "y=50",
        "center": "y=(h-text_h)/2",
        "bottom": "y=h-text_h-50"
    }
    drawtext = f"drawtext=text='{text}':fontcolor=white:fontsize=36:x=(w-text_w)/2:{pos_map.get(position)}"
    cmd = [
        "ffmpeg", "-y",
        "-hwaccel", "cuda",
        "-i", input_path,
        "-vf", drawtext,
        "-c:v", "h264_nvenc", "-preset", "p7", "-cq", "18",
        "-c:a", "copy",
        output_path
    ]
    run_cmd(cmd)

# =========================
# üß† AI WHISPER ‚Äî T·∫†O CAPTION T·ª∞ ƒê·ªòNG
# =========================
def generate_auto_caption(audio_path):
    print("üß† Whisper ƒëang t·∫°o caption t·ª± ƒë·ªông...")
    try:
        model = whisper.load_model("base")
        result = model.transcribe(audio_path)
        caption_text = result["text"].strip()
        print(f"üí¨ Caption: {caption_text}")
        return caption_text
    except Exception as e:
        print(f"‚ö†Ô∏è Whisper l·ªói: {e}")
        return Path(audio_path).stem.replace("_", " ").title()

# =========================
# üìã GIAO DI·ªÜN NH·∫¨P TH√îNG TIN
# =========================
def ask_folder(title):
    root = tk.Tk(); root.withdraw()
    return filedialog.askdirectory(title=title)

def ask_text(title, prompt, default=""):
    root = tk.Tk(); root.withdraw()
    return simpledialog.askstring(title, prompt, initialvalue=default)

# =========================
# üöÄ MAIN
# =========================
def main():
    print("üöÄ ARM-Nail: GPU + Whisper Caption + High Quality")

    folder_elvenlab = ask_folder("üìÅ Ch·ªçn th∆∞ m·ª•c ElvenLab (gi·ªçng n√≥i)")
    folder_video = ask_folder("üìÅ Ch·ªçn th∆∞ m·ª•c video n·ªÅn")
    out_folder = ask_folder("üì§ Ch·ªçn th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£")

    caption_pos = ask_text("üìç Caption", "Ch·ªçn v·ªã tr√≠ caption (top / center / bottom):", "bottom")
    title_text = ask_text("‚úçÔ∏è Title", "Nh·∫≠p title ƒë·ªÉ g·∫Øn l√™n video:", "Nail Transformation")
    title_pos = ask_text("üìç V·ªã tr√≠ title", "Ch·ªçn v·ªã tr√≠ title (top / center / bottom):", "top")

    if not all([folder_elvenlab, folder_video, out_folder]):
        print("‚ùå Thi·∫øu th√¥ng tin.")
        return

    audios = sorted([str(p) for p in Path(folder_elvenlab).glob("*.mp3")])
    videos = sorted([str(p) for p in Path(folder_video).glob("*.mp4")])
    video_durs = {v: get_duration(v) for v in videos}

    for audio in audios:
        audio_dur = get_duration(audio)
        base = Path(audio).stem
        matched = None

        # üîç T√¨m video g·∫ßn nh·∫•t
        for v in videos:
            if abs(video_durs[v] - audio_dur) <= 5:
                matched = v
                break

        output_raw = Path(out_folder) / f"{base}_merged.mp4"

        if matched:
            v_dur = video_durs[matched]
            speed = round(audio_dur / v_dur, 3) if v_dur > 0 else 1.0
            adjusted_audio = "__temp_audio.mp3"
            change_audio_speed(audio, adjusted_audio, speed)
            merge_audio_video_keep_quality(matched, adjusted_audio, output_raw)
            os.remove(adjusted_audio)
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video kh·ªõp ‚Üí gh√©p clip")
            total, batch = 0.0, []
            for v in videos:
                batch.append(v)
                total += video_durs[v]
                if abs(total - audio_dur) <= 5:
                    break
            if not batch:
                print("‚ùå Kh√¥ng ƒë·ªß video ƒë·ªÉ gh√©p.")
                continue
            temp_merge = "__temp_combined.mp4"
            merge_videos_concat_nvidia(batch, temp_merge)
            merge_audio_video_keep_quality(temp_merge, audio, output_raw)
            os.remove(temp_merge)

        if not Path(output_raw).exists():
            print(f"‚ùå Merge th·∫•t b·∫°i: {output_raw.name}")
            continue

        # üß† T·∫°o caption t·ª´ Whisper
        caption_text = generate_auto_caption(audio)

        # üñãÔ∏è Add caption + title
        captioned = "__captioned.mp4"
        add_text_to_video(output_raw, captioned, caption_text, caption_pos)

        final_output = Path(out_folder) / f"{base}_final.mp4"
        add_text_to_video(captioned, final_output, title_text, title_pos)

        os.remove(output_raw)
        os.remove(captioned)
        print(f"‚úÖ Xu·∫•t: {final_output}")

if __name__ == "__main__":
    main()
