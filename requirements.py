import os
import sys
import subprocess
import platform
import webbrowser
from importlib import import_module

# Danh s√°ch c√°c th∆∞ vi·ªán Python c·∫ßn thi·∫øt
PYTHON_REQUIREMENTS = [
    "os",
    "shutil",
    "re",
    "random",
    "time",
    "uuid",
    "glob",
    "csv",
    "multiprocessing",
    "googleapiclient.discovery",
    "googleapiclient.errors",
    "moviepy.editor",
    "scenedetect",
    "ffmpeg",               # ffmpeg-python
    "yt_dlp",               # yt-dlp Python API
    "torch",                # d√πng cho GPU (Demucs, PyTorch-based tools)
    "torchaudio",           # √¢m thanh (Demucs/GPU audio processing)
    "numpy",                # x·ª≠ l√Ω frame nhanh
    "opencv-python",        # d√πng ƒë·ªÉ x·ª≠ l√Ω video b·∫±ng OpenCV (GPU supported)
    "tqdm",                 # progress bar
    "colorama",             # t√¥ m√†u terminal
]


# Th√¥ng tin c√†i ƒë·∫∑t th·ªß c√¥ng chi ti·∫øt
MANUAL_INSTALLS = {
    "ffmpeg": {
        "description": "FFmpeg l√† c√¥ng c·ª• x·ª≠ l√Ω video/audio c·∫ßn thi·∫øt",
        "steps": [
            "1. Truy c·∫≠p trang ch√≠nh th·ª©c: https://www.gyan.dev/ffmpeg/builds/",
            "2. Download: ffmpeg-release-essentials.zip",
            "3. T·∫°o th∆∞ m·ª•c m·ªõi: D:\\Tools\\ffmpeg",
            "4. Gi·∫£i n√©n file .zip v√†o th∆∞ m·ª•c ƒë√≥: D:\\Tools\\ffmpeg\\bin",
            "5. Th√™m v√†o PATH:",
            "   - M·ªü Edit the system environment variables",
            "   - Environment Variables -> System variables",
            "   - Ch·ªçn Path ‚Üí Edit ‚Üí New ‚Üí d√°n 'D:\\Tools\\ffmpeg\\bin'",
            "6. Ki·ªÉm tra: m·ªü Command Prompt v√† ch·∫°y 'ffprobe -version'"
        ],
        "url": "https://www.gyan.dev/ffmpeg/builds/"
    },
    "nvidia_driver": {
        "description": "C·∫≠p nh·∫≠t driver NVIDIA ƒë·ªÉ t·∫≠n d·ª•ng GPU",
        "steps": [
            "1. Truy c·∫≠p: https://www.nvidia.com/Download/index.aspx?lang=en-us",
            "2. Ch·ªçn ƒë√∫ng Product Series theo c·∫•u h√¨nh m√°y:",
            "   - Xem c·∫•u h√¨nh: Windows + R ‚Üí dxdiag ‚Üí Tab Display",
            "3. Download b·∫£n Game Ready Driver (GRD) ho·∫∑c Studio Driver (SD)",
            "4. C√†i ƒë·∫∑t:",
            "   - Ch·ªçn Custom (Advanced)",
            "   - T√≠ch v√†o 'Perform a clean installation'",
            "   - Ho√†n t·∫•t c√†i ƒë·∫∑t (m√°y s·∫Ω nh·∫•p nh√°y m√†n h√¨nh)"
        ],
        "url": "https://www.nvidia.com/Download/index.aspx?lang=en-us"
    },
    "demucs": {
        "description": "C√¥ng c·ª• t√°ch √¢m thanh (n·∫øu c·∫ßn)",
        "steps": [
            "pip install demucs",
            "N·∫øu c√≥ GPU NVIDIA, c√†i th√™m:",
            "pip install torch torchaudio -f https://download.pytorch.org/whl/cu111/torch_stable.html"
        ]
    }
}

def print_install_instructions(tool_name):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n c√†i ƒë·∫∑t chi ti·∫øt"""
    tool = MANUAL_INSTALLS.get(tool_name)
    if not tool:
        return
    
    print(f"\nüìå {tool_name.upper()}: {tool['description']}")
    print("üîß C√°c b∆∞·ªõc c√†i ƒë·∫∑t:")
    for step in tool["steps"]:
        print(f"    {step}")
    
    if "url" in tool:
        open_browser = input(f"\nüëâ B·∫°n c√≥ mu·ªën m·ªü tr√¨nh duy·ªát ƒë·∫øn trang download {tool_name}? (y/n): ").lower()
        if open_browser == 'y':
            webbrowser.open(tool["url"])

def check_python_dependencies():
    missing = []
    for lib in PYTHON_REQUIREMENTS:
        try:
            import_module(lib.split('.')[0])
        except ImportError:
            missing.append(lib)
    return missing

def install_pip_packages(missing_packages):
    for package in missing_packages:
        print(f"‚öôÔ∏è ƒêang c√†i ƒë·∫∑t {package}...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
            print(f"‚úÖ ƒê√£ c√†i ƒë·∫∑t th√†nh c√¥ng {package}")
        except subprocess.CalledProcessError:
            print(f"‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t {package}")

def check_system_tools():
    missing_tools = []
    
    # Ki·ªÉm tra ffmpeg
    try:
        subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        missing_tools.append("ffmpeg")
    
    # Ki·ªÉm tra GPU NVIDIA
    if platform.system() == "Windows":
        try:
            subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
            try:
                import torch
                if not torch.cuda.is_available():
                    missing_tools.append("nvidia_driver")
            except ImportError:
                pass
        except (subprocess.CalledProcessError, FileNotFoundError):
            pass
    
    return missing_tools

def main():
    print("""
    ====================================
    üîç KI·ªÇM TRA V√Ä C√ÄI ƒê·∫∂T Y√äU C·∫¶U H·ªÜ TH·ªêNG
    ====================================
    """)
    
    # Ki·ªÉm tra th∆∞ vi·ªán Python
    missing_python = check_python_dependencies()
    if missing_python:
        print("\nüì¶ C√°c th∆∞ vi·ªán Python c·∫ßn c√†i ƒë·∫∑t:")
        for lib in missing_python:
            print(f"- {lib}")
        
        install_now = input("\nüëâ B·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t t·ª± ƒë·ªông c√°c th∆∞ vi·ªán n√†y? (y/n): ").strip().lower()
        if install_now == 'y':
            install_pip_packages(missing_python)
        else:
            print("‚ö†Ô∏è B·∫°n c·∫ßn c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán tr√™n ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh.")
    else:
        print("‚úÖ T·∫•t c·∫£ th∆∞ vi·ªán Python ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t.")
    
    # Ki·ªÉm tra c√¥ng c·ª• h·ªá th·ªëng
    missing_tools = check_system_tools()
    if missing_tools:
        print("\n‚ö†Ô∏è C√ÅC C√îNG C·ª§ C·∫¶N C√ÄI ƒê·∫∂T TH·ª¶ C√îNG:")
        for tool in missing_tools:
            print_install_instructions(tool)
    
    # Ki·ªÉm tra CUDA n·∫øu c√≥ GPU NVIDIA
    if platform.system() == "Windows":
        try:
            subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
            print("\n‚ÑπÔ∏è PH√ÅT HI·ªÜN GPU NVIDIA")
            try:
                import torch
                if torch.cuda.is_available():
                    print(f"‚úÖ ƒê√£ c√†i ƒë·∫∑t PyTorch v·ªõi CUDA (phi√™n b·∫£n {torch.version.cuda})")
                else:
                    print("‚ö†Ô∏è PyTorch ch∆∞a h·ªó tr·ª£ CUDA")
                    print_install_instructions("nvidia_driver")
            except ImportError:
                print("‚ö†Ô∏è PyTorch ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. N·∫øu c·∫ßn ch·∫°y Demucs tr√™n GPU:")
                print_install_instructions("demucs")
        except (subprocess.CalledProcessError, FileNotFoundError):
            pass
    
    print("\n" + "="*50)
    print("‚úî KI·ªÇM TRA HO√ÄN T·∫§T. B·∫†N C√ì TH·ªÇ CH·∫†Y C√ÅC SCRIPT C·ª¶A M√åNH")
    print("="*50)

if __name__ == "__main__":
    main()